<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <CodeTaskFactoryAssemblyFile Condition=" '$(CodeTaskFactoryAssemblyFile)' == '' And '$(MSBuildToolsVersion)' == '12.0' ">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll</CodeTaskFactoryAssemblyFile>
    <CodeTaskFactoryAssemblyFile Condition=" '$(CodeTaskFactoryAssemblyFile)' == ''">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll</CodeTaskFactoryAssemblyFile>
  </PropertyGroup>

  <UsingTask TaskName="RegexReplaceInFile" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <InputFilename ParameterType="System.String" Required="true" />
      <OutputFilename ParameterType="System.String" Required="true" />
      <Patterns ParameterType="System.String" Required="true" />
      <Replacements ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        string contents;
        using (var input = new StreamReader(InputFilename))
        {
            contents = input.ReadToEnd();
        }

        var patternsEnum = Patterns.Split(';').AsEnumerable().GetEnumerator();
        var replacementsEnum = Replacements.Split(';').AsEnumerable().GetEnumerator();
        while (patternsEnum.MoveNext() && replacementsEnum.MoveNext())
        {
            string pattern = patternsEnum.Current;
            var replacement = replacementsEnum.Current;
            var expr = new Regex(pattern, RegexOptions.Compiled | RegexOptions.Multiline);
            contents = expr.Replace(contents, replacement);
        }

        using (var output = new StreamWriter(OutputFilename))
        {
            output.Write(contents);
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <InputFileNames ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
      <![CDATA[        
        const int BufferSize = 64 * 1024;

        var buffer = new byte[BufferSize];
        var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;
        
        using (var outputFileStream = new FileStream(OutputFileName, fileMode))
        {
          using (var archive = new ZipArchive(outputFileStream, ZipArchiveMode.Create))
          {
            foreach (var inputFileName in InputFileNames.Select(f => f.ItemSpec))
            {
              var archiveEntry = archive.CreateEntry(Path.GetFileName(inputFileName));
              
              using (var fs = new FileStream(inputFileName, FileMode.Open))
              {
                using (var zipStream = archiveEntry.Open())
                {
                  int bytesRead = -1;
                  while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)
                  {
                    zipStream.Write(buffer, 0, bytesRead);
                  }
                }
              }
            }
          }
        }        
      ]]>
      </Code>
    </Task>
  </UsingTask>
  
  <UsingTask TaskName="ExtractNuspec" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <PackagesConfigPath ParameterType="System.String" Required="true" />
      <PackagesOutputPath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="WindowsBase" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Packaging" />
      <Using Namespace="System.Xml" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var packagesConfigDocument = new XmlDocument();
        packagesConfigDocument.Load(PackagesConfigPath);
        var packageNodeList = packagesConfigDocument.SelectNodes("/packages/package");

        foreach (XmlNode packageNode in packageNodeList)
        {
            var packageId = packageNode.Attributes["id"].Value;
            var packageVersion = packageNode.Attributes["version"].Value;
            var directoryName = String.Concat(packageId, ".", packageVersion);
            var nupkgFileName = String.Concat(packageId, ".", packageVersion, ".nupkg");
            var nuspecFileName = String.Concat(packageId, ".", packageVersion, ".nuspec");
            var nupkgFilePath = Path.Combine(PackagesOutputPath, directoryName, nupkgFileName);
            var nuspecPartPath = String.Concat("/", packageId, ".nuspec");
            var nuspecFilePath = Path.Combine(PackagesOutputPath, directoryName, nuspecFileName);

            if (!File.Exists(nuspecFilePath)
                || File.GetCreationTime(nuspecFilePath) < File.GetCreationTime(nupkgFilePath))
            {
                using (var package = ZipPackage.Open(nupkgFilePath, FileMode.Open, FileAccess.Read))
                {
                    string content;

                    var part = package.GetPart(new Uri(nuspecPartPath, UriKind.Relative));
                    using (var reader = new StreamReader(part.GetStream(FileMode.Open, FileAccess.Read)))
                    {
                        content = reader.ReadToEnd();
                    }

                    using (var writer = new StreamWriter(nuspecFilePath))
                    {
                        writer.Write(content);
                    }
                }
            }
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="ExtractNuspecFromPackage" TaskFactory="CodeTaskFactory" AssemblyFile="$(CodeTaskFactoryAssemblyFile)">
    <ParameterGroup>
      <NuGetPackageFilePath ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="WindowsBase" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.IO.Packaging" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            var packageNameWithNoVersion = Path.GetFileNameWithoutExtension(NuGetPackageFilePath);
            var firstIndexOfADigit = Int32.MaxValue;
            for (var i = 0; i < 10; i++)
            {
                int index;
                if ((index = packageNameWithNoVersion.IndexOf((char)('0' + i))) >= 0)
                {
                    if (firstIndexOfADigit > index)
                    {
                        firstIndexOfADigit = index;
                    }
                }
            }

            if (firstIndexOfADigit != Int32.MaxValue)
            {
                packageNameWithNoVersion = packageNameWithNoVersion.Substring(0, firstIndexOfADigit-1);
            }

            var nuspecOutputFilePath = Path.ChangeExtension(NuGetPackageFilePath, ".nuspec");
            var nuspecPartPath = String.Concat("/", packageNameWithNoVersion, ".nuspec");
            using (var package = ZipPackage.Open(NuGetPackageFilePath, FileMode.Open, FileAccess.Read))
            {
                string content;

                var part = package.GetPart(new Uri(nuspecPartPath, UriKind.Relative));
                using (var reader = new StreamReader(part.GetStream(FileMode.Open, FileAccess.Read)))
                {
                    content = reader.ReadToEnd();
                }

                using (var writer = new StreamWriter(nuspecOutputFilePath))
                {
                    writer.Write(content);
                }
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>