<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Drawing;

namespace Microsoft.Data.Entity.Design.Model.Designer
{
    internal static class EntityDesignerDiagramConstant
    {
<#
            /* The code below will do the following:
                - Load Entity Designer Model to XDocument.
                - Iterate through CompartmentShape elements in the document.
                - If the CompartmentShape is EntityTypeShape's, get the FillColor attribute.
                - Store FillColor and DefaultExpandCollapseState attribute values in the temporary variables.
                - Assign FillColor and DefaultExpandCollapseState attribute value to EntityDesignerDiagramConstant static members.
            */

            string[] fillColorParts = null;
            bool defaultShapeExpanded = true;
            XDocument dslModelDefinitionColor = XDocument.Load( @"..\EntityDesignEntityDesigner\DslDefinition.dsl");

            Debug.Assert( dslModelDefinitionColor != null, "DSL Model definition could not be loaded");
            foreach( XElement element in dslModelDefinitionColor.Root.Descendants(XName.Get("CompartmentShape", "http://schemas.microsoft.com/VisualStudio/2005/DslTools/DslDefinitionModel")))
            {
                if( element.Attributes().Count( a => a.Name == "Name" && a.Value == "EntityTypeShape" ) == 1 )
                {
                    XAttribute fillColorAttribute = element.Attribute("FillColor");
                    Debug.Assert( fillColorAttribute != null, "Could not find FillColor attribute from EntityTypeShape element." );

                    if( fillColorAttribute != null )
                    {
                        Debug.WriteLine("Found EntityTypeShape fill color attribute. Value=" + fillColorAttribute.Value);
                        fillColorParts = fillColorAttribute.Value.Split(',');
                    }

                    // if the attribute doesn't exist, the defaultShapeExpanded should be set to true. 
                    XAttribute expandCollapseAttribute = element.Attribute("DefaultExpandCollapseState");
                    if( expandCollapseAttribute != null )
                    {
                        defaultShapeExpanded = String.Compare( expandCollapseAttribute.Value, "Expanded", StringComparison.OrdinalIgnoreCase) == 1;
                    }

                    break;
                }
            }

            Debug.Assert(fillColorParts != null, "Entity type shape default color should have been set at this point.");
			
			if (fillColorParts.Length == 3)
			{  
#>
        internal static readonly Color EntityTypeShapeDefaultFillColor = Color.FromArgb(<#=fillColorParts[0]#>,<#=fillColorParts[1]#>,<#=fillColorParts[2]#>);
<#
            }
			else
			{
#>
        internal static readonly Color EntityTypeShapeDefaultFillColor = Color.<#=fillColorParts[0]#>;
<#
			}
#>
        internal static readonly bool IsDefaultShapeExpanded = <#=(defaultShapeExpanded == true?"true":"false")#>;
    }
}